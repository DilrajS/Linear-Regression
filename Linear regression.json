{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Technique Assignment 3: Linear regression\n",
    "## Cogs 109 Spring 2020\n",
    "### Student Name:  Dilraj Sandhu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "from sklearn import linear_model\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. (15 points) Datasets and variables\n",
    "\n",
    "Find a dataset from the [UCI machine learning repository](http://archive.ics.uci.edu/ml/index.php) that is suitable for linear regression. Provide a link to your chosen dataset and briefly describe its content.\n",
    "\n",
    "**(9)** List the following:\n",
    "* number of variables\n",
    "* number of samples\n",
    "* labels (what is the label?)\n",
    "\n",
    "**(6)** Create and report a research question that you could answer using this dataset and some or all of the variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n33 = Regular insulin dose\\n34 = NPH insulin dose\\n35 = UltraLente insulin dose\\n48 = Unspecified blood glucose measurement\\n57 = Unspecified blood glucose measurement\\n58 = Pre-breakfast blood glucose measurement\\n59 = Post-breakfast blood glucose measurement\\n60 = Pre-lunch blood glucose measurement\\n61 = Post-lunch blood glucose measurement\\n62 = Pre-supper blood glucose measurement\\n63 = Post-supper blood glucose measurement\\n64 = Pre-snack blood glucose measurement\\n65 = Hypoglycemic symptoms\\n66 = Typical meal ingestion\\n67 = More-than-usual meal ingestion\\n68 = Less-than-usual meal ingestion\\n69 = Typical exercise activity\\n70 = More-than-usual exercise activity\\n71 = Less-than-usual exercise activity\\n72 = Unspecified special event \\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Part a.\n",
    "# Dataset name: Diabetes\n",
    "# Dataset Link: http://archive.ics.uci.edu/ml/datasets/Diabetes\n",
    "\n",
    "# Number of variables: 20\n",
    "# Number of samples: 70 sets, about 950 samples in each\n",
    "# Labels: Listed below\n",
    "'''\n",
    "33 = Regular insulin dose\n",
    "34 = NPH insulin dose\n",
    "35 = UltraLente insulin dose\n",
    "48 = Unspecified blood glucose measurement\n",
    "57 = Unspecified blood glucose measurement\n",
    "58 = Pre-breakfast blood glucose measurement\n",
    "59 = Post-breakfast blood glucose measurement\n",
    "60 = Pre-lunch blood glucose measurement\n",
    "61 = Post-lunch blood glucose measurement\n",
    "62 = Pre-supper blood glucose measurement\n",
    "63 = Post-supper blood glucose measurement\n",
    "64 = Pre-snack blood glucose measurement\n",
    "65 = Hypoglycemic symptoms\n",
    "66 = Typical meal ingestion\n",
    "67 = More-than-usual meal ingestion\n",
    "68 = Less-than-usual meal ingestion\n",
    "69 = Typical exercise activity\n",
    "70 = More-than-usual exercise activity\n",
    "71 = Less-than-usual exercise activity\n",
    "72 = Unspecified special event \n",
    "'''\n",
    "\n",
    "\n",
    "# Part b.\n",
    "# Research Question: Would blood glucose be higher before or after lunch for a diabetic individual according to this data?\n",
    "# Answer: After Lunch (12:00 PM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. (20) Arrays and numpy\n",
    "This tutorial should be very helpful:\n",
    "https://www.numpy.org/devdocs/user/quickstart.html\n",
    "### a. **(10)**\n",
    "Use arange() and reshape() from numpy to create a 4x5 array containing the integers 1 through 20.\n",
    "Append a column of ones to the left of your array to create a 4x6 array.\n",
    "Multiply every element of the array by 2.\n",
    "Print **only** the resulting array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  1  2  3  4  5]\n",
      " [ 1  6  7  8  9 10]\n",
      " [ 1 11 12 13 14 15]\n",
      " [ 1 16 17 18 19 20]]\n"
     ]
    }
   ],
   "source": [
    "array = np.arange(1,21).reshape(4,5)\n",
    "col = np.ones(4,dtype=int).reshape(4,1)\n",
    "array = np.append(col,array,axis=1)\n",
    "print(array)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b. (10)\n",
    "Use linspace() and reshape() to create a 20 x 20 array that contains a smooth range of values between 0 and 1, inclusive.\n",
    "\n",
    "Create a scatter plot using the first (leftmost) column of your array as the x values and the last (rightmost) column of your array as the y values. Use x limits 0 and 1 and y limits 0 and 1 for your plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "array = np.linspace(0,2, num=400).reshape(20,20)\n",
    "x = array[0]\n",
    "y = array[len(array)-1]\n",
    "plt.scatter(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. (40 points) Univariate linear regression\n",
    "\n",
    "*Note: Solutions to this problem must follow the method described in class and the linear regression handout. There is some flexibility in how your solution is coded, but you may not use special functions that automatically perform linear regression for you.*\n",
    "\n",
    "Load in the BodyBrainWeight.csv dataset. Perform linear regression using two different models:\n",
    "\n",
    "M1: brain_weight = w0 + w1 x body_weight\n",
    "\n",
    "M2: brain_weight = w0 + w1 x body_weight + w2 x body_weight^2\n",
    "\n",
    "### a. **(15)**\n",
    "For each model, follow the steps shown in class to solve for w. Report the model, including w values and variable names for both models.\n",
    "\n",
    "\n",
    "### b. **(10)**\n",
    "Use subplots to display two graphs, one for each model. In each graph, include:\n",
    "* Labeled x and y axes\n",
    "* Title\n",
    "* Scatterplot of the dataset\n",
    "* A smooth line representing the model\n",
    "\n",
    "### c. **(10)**\n",
    "For each model, calculate the sum squared error (SSE). Show your 2 SSE values together in a bar plot.\n",
    "\n",
    "### c. **(5)**\n",
    "Which model do you think is better? Why? Is there a different model that you think would better represent the data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Load the dataset and extract Brain weight as X and Body weight as Y\n",
    "\n",
    "bbdata = pd.read_csv(\"BodyBrainWeight.csv\").values\n",
    "\n",
    "X = bbdata[:,0]\n",
    "Y = bbdata[:,1]\n",
    "\n",
    "# This is good for debugging\n",
    "\n",
    "x = X.reshape(46,1)\n",
    "y = Y.reshape(46,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model M1: brain_weight = w0 + w1 * body_weight [124.92810523   0.9370391 ]\n",
      "Brain weight =  [124.92810523   0.9370391 ]\n"
     ]
    }
   ],
   "source": [
    "## Create A, the augmented data array\n",
    "\n",
    "#ones = \n",
    "\n",
    "#A1 = \n",
    "#A1.shape\n",
    "\n",
    "## Solve for w, the weight vector\n",
    "\n",
    "#w1 = np.linalg.lstsq(  )[0]\n",
    "\n",
    "ones = ones = np.ones((len(x),1), dtype = int)\n",
    "A = np.hstack((ones, x)) \n",
    "w1 = np.linalg.lstsq(A, Y, rcond = None)[0]\n",
    "\n",
    "print(\"Model M1: brain_weight = w0 + w1 * body_weight\",w1)\n",
    "print(\"Brain weight = \",w1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model M2: brain_weight = w0 + w1 * body_weight + w2 * body_weight^2\n",
      "Brain weight =  [ 4.90913691e+01  1.59046222e+00 -1.08695684e-04]\n"
     ]
    }
   ],
   "source": [
    "## Create A, the augmented data array\n",
    "\n",
    "#ones = \n",
    "#squares = \n",
    "\n",
    "#A2 = \n",
    "\n",
    "## Solve for w, the weight vector\n",
    "ones = ones= np.ones((len(x),1), dtype = int)\n",
    "squared = x*x\n",
    "A_2 = np.hstack((ones, x))\n",
    "A2 = np.hstack((A_2, squared))\n",
    "w2 = np.linalg.lstsq(A2, Y, rcond = None)[0]\n",
    "\n",
    "print(\"Model M2: brain_weight = w0 + w1 * body_weight + w2 * body_weight^2\")\n",
    "print(\"Brain weight = \", w2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Create a smooth set of X values for plotting the model\n",
    "\n",
    "## Send the X values for plotting through the linear model\n",
    "\n",
    "bodybraindata = pd.read_csv(\"BodyBrainWeight.csv\").values\n",
    "X = bodybraindata[:,0]\n",
    "Y = bodybraindata[:,1]\n",
    "y_pr = np.matmul(A, w1)\n",
    "y2_pr = np.matmul(A2, w2)\n",
    "fig, axs = plt.subplots(1, 2, figsize = (10, 5), sharey = True)\n",
    "\n",
    "axs[0].scatter(X, Y)\n",
    "axs[0].plot(X,y_pr, color='red')\n",
    "axs[1].scatter(X, Y)\n",
    "axs[1].plot(X, y2_pr, color = 'red')\n",
    "\n",
    "fig.suptitle('M1 vs M2')\n",
    "for ax in axs.flat: \n",
    "    ax.set(xlabel='body weight', ylabel = 'brain weight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sse for M1:  7317401.27023307  sse for M2:  5497572.515005938\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Plot the data along with the model\n",
    "\n",
    "# Plot the data\n",
    "# Plot the model\n",
    "sse = sum((y_pr - Y)**2)\n",
    "sse2 = sum((y2_pr - Y)**2)\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "xbar = ['sse for M1', 'sse for M2']\n",
    "ybar = [sse, sse2]\n",
    "ax.bar(xbar, ybar)\n",
    "\n",
    "plt.show # This lets you plot multiple inputs on the same graph\n",
    "print(\"sse for M1: \",sse,\" sse for M2: \", sse2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. (25 points) Multivariate linear regression with cross validation\n",
    "\n",
    "Using the dataset found in Housing.csv, build a multivariate model to predict house price using lot size and the number of bedrooms as predictors.\n",
    "\n",
    "Hint: You may use this as your model:\n",
    "\n",
    "Price = w0 + w1 x Lot size + w2 x Bedrooms\n",
    "\n",
    "First, split your data into a training set (80%) and a test set (20%). Then perform linear regression using the **training data** only. Report your model and show the mean squared error (MSE) for your **training** and **test** data using a bar graph.\n",
    "\n",
    "MSE can be found by dividing SSE by the number of samples in your data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Load the housing data\n",
    "\n",
    "df = pd.read_csv(\"Housing.csv\")\n",
    "\n",
    "# Extract the variables\n",
    "\n",
    "Y = df['price'].values\n",
    "X1 = df['lotsize'].values\n",
    "X2 = df['bedrooms'].values\n",
    "X=df[[\"lotsize\",\"bedrooms\"]]\n",
    "y=df[\"price\"]\n",
    "\n",
    "Xtrain,Xtest,ytrain,ytest=model_selection.train_test_split(X,y,test_size=.2,random_state=42)\n",
    "model=linear_model.LinearRegression() \n",
    "model.fit(Xtrain,ytrain) \n",
    "\n",
    "ypred=model.predict(Xtest)\n",
    "a=mean_squared_error(ytest,ypred) \n",
    "y_train_pred=model.predict(Xtrain)\n",
    "b=mean_squared_error(ytrain,y_train_pred)\n",
    "fig = plt.figure()\n",
    "ax = fig.add_axes([0,0,1,1])\n",
    "abc = ['train','Test']\n",
    "abcd = [a,b]\n",
    "ax.bar(abc,abcd)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
